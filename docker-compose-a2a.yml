version: '3.8'

services:
  researcher-agent:
    build: .
    container_name: researcher-agent
    command: python a2a_demo.py
    healthcheck:
      test: ["CMD", "python", "-c", "import http.client; conn = http.client.HTTPConnection('localhost', 8001); conn.request('GET', '/agent-card'); exit(0) if conn.getresponse().status == 200 else exit(1)"]
      interval: 5s
      timeout: 3s
      retries: 5
    environment:
      - DOCKER_CONTAINER_ROLE=agent
      - AGENT_TYPE=researcher
      - AGENT_PORT=8001
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://a2a-otel-collector:4318
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
    networks:
      - a2a-network

  analyst-agent:
    build: .
    container_name: analyst-agent
    command: python a2a_demo.py
    healthcheck:
      test: ["CMD", "python", "-c", "import http.client; conn = http.client.HTTPConnection('localhost', 8002); conn.request('GET', '/agent-card'); exit(0) if conn.getresponse().status == 200 else exit(1)"]
      interval: 5s
      timeout: 3s
      retries: 5
    environment:
      - DOCKER_CONTAINER_ROLE=agent
      - AGENT_TYPE=analyst
      - AGENT_PORT=8002
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://a2a-otel-collector:4318
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
    networks:
      - a2a-network

  reporter-agent:
    build: .
    container_name: reporter-agent
    command: python a2a_demo.py
    healthcheck:
      test: ["CMD", "python", "-c", "import http.client; conn = http.client.HTTPConnection('localhost', 8003); conn.request('GET', '/agent-card'); exit(0) if conn.getresponse().status == 200 else exit(1)"]
      interval: 5s
      timeout: 3s
      retries: 5
    environment:
      - DOCKER_CONTAINER_ROLE=agent
      - AGENT_TYPE=reporter
      - AGENT_PORT=8003
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://a2a-otel-collector:4318
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
    networks:
      - a2a-network

  a2a-orchestrator:
    build: .
    container_name: a2a-orchestrator
    command: python a2a_demo.py
    environment:
      - DOCKER_CONTAINER_ROLE=orchestrator
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://a2a-otel-collector:4318
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
    depends_on:
      otel-collector:
        condition: service_healthy
      researcher-agent:
        condition: service_healthy
      analyst-agent:
        condition: service_healthy
      reporter-agent:
        condition: service_healthy
    networks:
      - a2a-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: a2a-otel-collector
    command: ["--config=/etc/otelcol-contrib/config.yaml"]
    volumes:
      - ./local-otel-config.yaml:/etc/otelcol-contrib/config.yaml:ro
      - ./trace_files:/traces
      - ./logs:/logs
    ports:
      - "4317:4317"
      - "4318:4318"
      - "13133:13133"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:13133/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - a2a-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: a2a-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - a2a-network

networks:
  a2a-network:
    driver: bridge

volumes:
  logs:
  results:
  trace_files:
